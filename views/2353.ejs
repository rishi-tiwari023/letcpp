<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 2353: Design a Food Rating System (C++)
    </title>
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 2353: Design a Food Rating System (C++)</h1>
        <div class="problem-description">
            <p><strong>Problem:</strong>
                Design a food rating system that can modify food ratings and return the highest-rated food for a
                cuisine. Implement FoodRatings class with constructor(foods, cuisines, ratings), changeRating(food,
                newRating) to update ratings, and highestRated(cuisine) to return the highest-rated food. For ties,
                return the lexicographically smallest food name.
            </p>
            <p><strong>Example:</strong>
                Input: foods = ["kimchi", "miso", "sushi"], cuisines = ["korean", "japanese", "japanese"], ratings = [9,
                12, 8]. Operations: changeRating("sushi", 16) updates sushi to 16. highestRated("japanese") returns
                "sushi" (highest rating 16).
            </p>
        </div>
        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class FoodRatings {
private:
    // Map from cuisine to a set of (negative rating, food name) pairs
    // Set automatically maintains sorted order: highest rating first, then lexicographically
    unordered_map&lt;string, set&lt;pair&lt;int, string&gt;&gt;&gt; cuisineToFoodSet;
    
    // Map from food name to its (rating, cuisine) information for quick lookup
    unordered_map&lt;string, pair&lt;int, string&gt;&gt; foodInfo;

public:
    FoodRatings(vector&lt;string&gt;&amp; foods, vector&lt;string&gt;&amp; cuisines, vector&lt;int&gt;&amp; ratings) {
        // Initialize the food rating system with the given arrays
        for (int i = 0; i &lt; foods.size(); ++i) {
            string food = foods[i];
            string cuisine = cuisines[i];
            int rating = ratings[i];
            
            // Store food-rating pairs for each cuisine in a sorted set
            // Use negative rating for descending order, food name for lexicographic tiebreaker
            cuisineToFoodSet[cuisine].insert({-rating, food});
            
            // Store the rating and cuisine for each food for quick lookup
            foodInfo[food] = {rating, cuisine};
        }
    }
    
    void changeRating(string food, int newRating) {
        // Retrieve the current rating and cuisine of the food
        auto [oldRating, cuisine] = foodInfo[food];
        
        // Update the food's rating in the lookup map
        foodInfo[food] = {newRating, cuisine};
        
        // Remove the old entry from the cuisine's sorted set
        cuisineToFoodSet[cuisine].erase({-oldRating, food});
        
        // Insert the new entry with updated rating
        cuisineToFoodSet[cuisine].insert({-newRating, food});
    }
    
    string highestRated(string cuisine) {
        // Return the food with highest rating for the given cuisine
        // The set is sorted by rating (descending) and food name (ascending)
        return cuisineToFoodSet[cuisine].begin()-&gt;second;
    }
};</code></pre>
        </div>
        <a href="/" class="back-link">‚Üê Back to Home</a>
    </main>
</body>

</html>