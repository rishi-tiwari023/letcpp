<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 166: Fraction to Recurring Decimal (C++)
    </title>
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 166: Fraction to Recurring Decimal (C++)</h1>
        <div class="problem-description">
            <p><strong>Problem:</strong>
                Given two integers representing the numerator and denominator of a fraction, return the fraction in
                string format. If the fractional part is repeating, enclose the repeating part in parentheses. Handle
                negative signs and detect when decimal patterns repeat infinitely.
            </p>
            <p><strong>Example:</strong>
                Input: numerator = 1, denominator = 3 → Output: "0.(3)". Input: numerator = 2, denominator = 1 → Output:
                "2". Input: numerator = 4, denominator = 333 → Output: "0.(012)".
            </p>
        </div>
        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    string fractionToDecimal(int numerator, int denominator) {
        if (numerator == 0) {
            return "0";
        }
        
        string result = "";
        
        if ((numerator &gt; 0) ^ (denominator &gt; 0)) {
            result += "-";
        }
        
        long long dividend = abs(static_cast&lt;long long&gt;(numerator));
        long long divisor = abs(static_cast&lt;long long&gt;(denominator));
        
        result += to_string(dividend / divisor);
        
        dividend %= divisor;
        
        if (dividend == 0) {
            return result;
        }
        
        result += ".";
        
        unordered_map&lt;long long, int&gt; remainderMap;
        
        while (dividend != 0) {
            remainderMap[dividend] = result.size();
            
            dividend *= 10;
            result += to_string(dividend / divisor);
            dividend %= divisor;
            
            if (remainderMap.count(dividend)) {
                result.insert(remainderMap[dividend], "(");
                result += ")";
                break;
            }
        }
        
        return result;
    }
};</code></pre>
        </div>
        <a href="/" class="back-link">← Back to Home</a>
    </main>
</body>

</html>