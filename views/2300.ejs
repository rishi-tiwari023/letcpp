<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 2300: Successful Pairs of Spells and Potions (C++)
    </title>
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>
<body>
    <main>
        <h1>LeetCode 2300: Successful Pairs of Spells and Potions (C++)</h1>
        <div class="problem-description">
            <p><strong>Problem:</strong>
                You are given two positive integer arrays spells and potions, of length n and m respectively, where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion. You are also given an integer success. A spell and potion pair is considered successful if the product of their strengths is at least success. Return an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell.
            </p>
            <p><strong>Example:</strong>
                Input: spells = [5,1,3], potions = [1,2,3,4,5], success = 7 → Output: [4,0,3]. For spell 5: pairs with potions [2,3,4,5] (products: 10,15,20,25). For spell 1: no pairs. For spell 3: pairs with potions [3,4,5] (products: 9,12,15). Input: spells = [3,1,2], potions = [8,5,8], success = 16 → Output: [2,0,2]. For spell 3: pairs with both 8s. For spell 1: no pairs. For spell 2: pairs with both 8s.
            </p>
        </div>
        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    vector&lt;int&gt; successfulPairs(vector&lt;int&gt;&amp; spells, vector&lt;int&gt;&amp; potions, long long success) {
        // Sort the potions array for binary search
        sort(potions.begin(), potions.end());
        
        vector&lt;int&gt; ans;
        int m = potions.size();
        
        // For each spell, find the number of successful potions
        for (int spell : spells) {
            // Find the first potion that when multiplied with the spell
            // is greater than or equal to the success threshold
            // We use (success + spell - 1) / spell to handle ceiling division
            int index = lower_bound(potions.begin(), potions.end(), 
                                   (success + spell - 1) / spell) - potions.begin();
            
            // All potions from index to end form successful pairs
            ans.push_back(m - index);
        }
        
        return ans;
    }
};</code></pre>
        </div>
        <a href="/" class="back-link">← Back to Home</a>
    </main>
</body>
</html>