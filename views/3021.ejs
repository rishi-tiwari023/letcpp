<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 3021: Alice and Bob Playing Flower Game
    </title>
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 3021: Alice and Bob Playing Flower Game (C++)</h1>
        <div class="problem-description">
            <p><strong>Problem:</strong>
                Alice and Bob are playing a turn-based game on a circular field surrounded by flowers. The circle
                represents the field, and there are x flowers in the clockwise direction between Alice and Bob, and y
                flowers in the anti-clockwise direction between them. Alice takes the first turn. In each turn, a player
                must choose either the clockwise or anti-clockwise direction and pick one flower from that side. At the
                end of the turn, if there are no flowers left at all, the current player captures their opponent and
                wins the game. Given two integers n and m, return the number of possible pairs (x, y) such that Alice
                can win the game, where 1 ≤ x ≤ n and 1 ≤ y ≤ m.
            </p>
            <p><strong>Example:</strong>
                Input: n = 3, m = 2<br>
                Output: 3<br>
                Explanation: The winning pairs for Alice are (1,2), (2,1), and (3,2). Alice wins when the total number
                of flowers (x + y) is odd, since she goes first.
            </p>
        </div>
        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    long long flowerGame(int n, int m) {
        // Alice wins when total flowers (x + y) is odd
        // This happens when one number is odd and the other is even
        
        // Count odd and even numbers in range [1, n]
        long long oddCountN = (n + 1) / 2;      // Number of odd numbers from 1 to n
        long long evenCountN = n / 2;           // Number of even numbers from 1 to n
        
        // Count odd and even numbers in range [1, m]
        long long oddCountM = (m + 1) / 2;      // Number of odd numbers from 1 to m
        long long evenCountM = m / 2;           // Number of even numbers from 1 to m
        
        // Alice wins when x is odd and y is even, OR x is even and y is odd
        // Total winning combinations = (odd_x * even_y) + (even_x * odd_y)
        return oddCountN * evenCountM + evenCountN * oddCountM;
    }
};</code></pre>
        </div>
        <a href="/" class="back-link">← Back to Home</a>
    </main>
</body>

</html>