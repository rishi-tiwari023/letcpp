<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 2197: Replace Non-Coprime Numbers in Array (C++)
    </title>
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 2197: Replace Non-Coprime Numbers in Array (C++)</h1>
        <div class="problem-description">
            <p><strong>Problem:</strong>
                You are given an array of integers nums. Repeatedly find two adjacent numbers that are non-coprime (GCD
                > 1), replace them with their LCM (Least Common Multiple), and continue until no such pairs exist. Two
                numbers are non-coprime if their Greatest Common Divisor is greater than 1. Return the final modified
                array.
            </p>
            <p><strong>Example:</strong>
                Input: nums = [6,4,3,2,7,6,2] → Output: [12,7,6]. Process: (6,4)→12, (12,3)→12, (12,2)→12, final
                (6,2)→6. Result: [12,7,6] with no more adjacent non-coprime pairs.
            </p>
        </div>
        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    vector&lt;int&gt; replaceNonCoprimes(vector&lt;int&gt;&amp; nums) {
        vector&lt;int&gt; stack;
        
        // Process each number in the input array
        for (int currentNum : nums) {
            // Add current number to the stack
            stack.push_back(currentNum);
            
            // Keep merging adjacent non-coprime numbers until no more merges possible
            while (stack.size() &gt; 1) {
                // Get the last two elements from the stack
                int topElement = stack.back();
                int secondElement = stack[stack.size() - 2];
                
                // Calculate the Greatest Common Divisor
                int gcdValue = __gcd(topElement, secondElement);
                
                // If GCD is 1, they are coprime - no merge needed
                if (gcdValue == 1) {
                    break;
                }
                
                // Remove the top element since we'll merge them
                stack.pop_back();
                
                // Replace the second element with LCM of the two numbers
                // LCM(a, b) = (a * b) / GCD(a, b)
                // Use 1LL to prevent integer overflow during multiplication
                stack.back() = 1LL * topElement * secondElement / gcdValue;
            }
        }
        
        return stack;
    }
};</code></pre>
        </div>
        <a href="/" class="back-link">← Back to Home</a>
    </main>
</body>

</html>