<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 1526: Minimum Number of Increments on Subarrays to Form a Target Array (C++)
    </title>
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 1526: Minimum Number of Increments on Subarrays to Form a Target Array (C++)</h1>
        <div class="problem-description">
            <p><strong>Problem:</strong>
                You are given an integer array target. You have an integer array initial of the same size as target with
                all elements initially zeros. In one operation you can choose any subarray from initial and increment
                each
                value by one. Return the minimum number of operations to form a target array from initial.
            </p>
            <p><strong>Example:</strong>
                Input: target = [1,2,3,2,1] → Output: 3. We need at least 3 operations to form the target array from
                initial = [0,0,0,0,0].
                Operation 1: [0,1,2,3,2,1] increment from index 0 to 4. Operation 2: [1,2,3,2,1] increment from index 1
                to 3.
                Operation 3: [1,2,3,2,1] increment index 2 only.
                Input: target = [3,1,1,2] → Output: 4. Operation 1: increment from index 0 to 0. Operation 2: increment
                from index 0 to 0.
                Operation 3: increment from index 0 to 0. Operation 4: increment from index 3 to 3.
            </p>
        </div>
        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    int minNumberOperations(vector&lt;int&gt;&amp; t) {
        int res = t[0];  // Start with the first element (we need at least this many operations)
        for (int i = 1; i &lt; t.size(); ++i) {
            // If current element is greater than previous,
            // we need extra (t[i] - t[i-1]) operations to raise this level.
            if (t[i] &gt; t[i - 1])
                res += t[i] - t[i - 1];
        }
        // Total number of operations required to form target array
        return res;
    }
};</code></pre>
        </div>
        <a href="/" class="back-link">← Back to Home</a>
    </main>
</body>

</html>