<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 3197: Find the Minimum Area to Cover All Ones II
    </title>
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 3197: Find the Minimum Area to Cover All Ones II (C++)</h1>
        <div class="problem-description">
            <p><strong>Problem:</strong>
                You are given a 2D binary array grid. You need to find 3 non-overlapping rectangles having non-zero
                areas with horizontal and vertical sides such that all the 1's in grid lie inside these rectangles.
                Return the minimum possible sum of the area of these rectangles.
            </p>
            <p><strong>Example:</strong>
                Input: grid = [[1,0,1],[1,1,1]]<br>
                Output: 5<br>
                Explanation: The grid contains 5 ones. We can cover them with 3 rectangles of areas 1, 1, and 3
                respectively, giving a total area of 5.
            </p>
        </div>
        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    int minimumSum(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {
        int m = grid.size();
        int n = grid[0].size();
        int ans = m * n; // Maximum possible area
        
        // Case 1: One rectangle on top, two on bottom (horizontal split then vertical)
        for (int i = 0; i &lt; m - 1; i++) {
            int top = minimumArea(grid, 0, i, 0, n - 1);
            for (int j = 0; j &lt; n - 1; j++) {
                int bottomLeft = minimumArea(grid, i + 1, m - 1, 0, j);
                int bottomRight = minimumArea(grid, i + 1, m - 1, j + 1, n - 1);
                ans = min(ans, top + bottomLeft + bottomRight);
            }
        }
        
        // Case 2: Two rectangles on top, one on bottom (horizontal split then vertical)
        for (int i = 1; i &lt; m; i++) {
            int bottom = minimumArea(grid, i, m - 1, 0, n - 1);
            for (int j = 0; j &lt; n - 1; j++) {
                int topLeft = minimumArea(grid, 0, i - 1, 0, j);
                int topRight = minimumArea(grid, 0, i - 1, j + 1, n - 1);
                ans = min(ans, topLeft + topRight + bottom);
            }
        }
        
        // Case 3: One rectangle on left, two on right (vertical split then horizontal)
        for (int j = 0; j &lt; n - 1; j++) {
            int left = minimumArea(grid, 0, m - 1, 0, j);
            for (int i = 0; i &lt; m - 1; i++) {
                int rightTop = minimumArea(grid, 0, i, j + 1, n - 1);
                int rightBottom = minimumArea(grid, i + 1, m - 1, j + 1, n - 1);
                ans = min(ans, left + rightTop + rightBottom);
            }
        }
        
        // Case 4: Two rectangles on left, one on right (vertical split then horizontal)
        for (int j = 1; j &lt; n; j++) {
            int right = minimumArea(grid, 0, m - 1, j, n - 1);
            for (int i = 0; i &lt; m - 1; i++) {
                int leftTop = minimumArea(grid, 0, i, 0, j - 1);
                int leftBottom = minimumArea(grid, i + 1, m - 1, 0, j - 1);
                ans = min(ans, leftTop + leftBottom + right);
            }
        }
        
        // Case 5: Three horizontal rectangles (two horizontal splits)
        for (int i1 = 0; i1 &lt; m - 2; i1++) {
            for (int i2 = i1 + 1; i2 &lt; m - 1; i2++) {
                int top = minimumArea(grid, 0, i1, 0, n - 1);
                int middle = minimumArea(grid, i1 + 1, i2, 0, n - 1);
                int bottom = minimumArea(grid, i2 + 1, m - 1, 0, n - 1);
                ans = min(ans, top + middle + bottom);
            }
        }
        
        // Case 6: Three vertical rectangles (two vertical splits)
        for (int j1 = 0; j1 &lt; n - 2; j1++) {
            for (int j2 = j1 + 1; j2 &lt; n - 1; j2++) {
                int left = minimumArea(grid, 0, m - 1, 0, j1);
                int middle = minimumArea(grid, 0, m - 1, j1 + 1, j2);
                int right = minimumArea(grid, 0, m - 1, j2 + 1, n - 1);
                ans = min(ans, left + middle + right);
            }
        }
        
        return ans;
    }
    
private:
    int minimumArea(vector&lt;vector&lt;int&gt;&gt;&amp; grid, int r1, int r2, int c1, int c2) {
        int minRow = INT_MAX, maxRow = INT_MIN;
        int minCol = INT_MAX, maxCol = INT_MIN;
        bool hasOne = false;
        
        for (int i = r1; i &lt;= r2; i++) {
            for (int j = c1; j &lt;= c2; j++) {
                if (grid[i][j] == 1) {
                    hasOne = true;
                    minRow = min(minRow, i);
                    maxRow = max(maxRow, i);
                    minCol = min(minCol, j);
                    maxCol = max(maxCol, j);
                }
            }
        }
        
        return hasOne ? (maxRow - minRow + 1) * (maxCol - minCol + 1) : 0;
    }
};</code></pre>
        </div>
        <a href="/" class="back-link">‚Üê Back to Home</a>
    </main>
</body>

</html>