<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        LeetCode 3027: Find the Number of Ways to Place People II
    </title>
    <link rel="stylesheet" href="/styles.css" />
    <script src="/solution.js"></script>
</head>

<body>
    <main>
        <h1>LeetCode 3027: Find the Number of Ways to Place People II (C++)</h1>
        <div class="problem-description">
            <p><strong>Problem:</strong>
                You are given a 2D array points of size n x 2 representing integer coordinates of some points on a
                2D-plane, where points[i] = [xi, yi]. We define the right direction as positive x-axis (increasing
                x-coordinate) and the left direction as negative x-axis (decreasing x-coordinate). Similarly, we define
                the up direction as positive y-axis (increasing y-coordinate) and the down direction as negative y-axis
                (decreasing y-coordinate). You have to place Alice and Bob in such a way that Alice is on the upper left
                of some rectangle and Bob is on the lower right of the same rectangle, and there are no other points in
                the rectangle (including the border).
            </p>
            <p><strong>Example:</strong>
                Input: points = [[1,1],[2,2],[3,3]]<br>
                Output: 0<br>
                Explanation: There is no way to place Alice and Bob such that Alice is in the upper left of Bob and no
                other points in the rectangle they form. All points are on the same diagonal line.
            </p>
        </div>
        <div class="code-container">
            <button class="copy-button" onclick="copyCode(this)">Copy Code</button>
            <pre><code class="language-cpp">class Solution {
public:
    int numberOfPairs(vector&lt;vector&lt;int&gt;&gt;&amp; points) {
        // Sort points by x-coordinate in ascending order
        // If x-coordinates are equal, sort by y-coordinate in descending order
        sort(points.begin(), points.end(), [](const vector&lt;int&gt;&amp; a, const vector&lt;int&gt;&amp; b) {
            if (a[0] == b[0]) {
                return a[1] &gt; b[1]; // Descending y if x is same
            }
            return a[0] &lt; b[0]; // Ascending x
        });
        
        int n = points.size();
        int pairCount = 0;
        
        // For each point as potential Alice position (upper left)
        for (int i = 0; i &lt; n; i++) {
            int aliceX = points[i][0];
            int aliceY = points[i][1];
            int maxY = INT_MIN; // Track highest y-coordinate found so far for valid Bob positions
            
            // Check all points that come after Alice as potential Bob positions
            for (int j = i + 1; j &lt; n; j++) {
                int bobX = points[j][0];
                int bobY = points[j][1];
                
                // Bob must be to the lower right of Alice
                // Since points are sorted by x, bobX &gt;= aliceX is guaranteed
                // We need bobY &lt;= aliceY for Bob to be lower or at same level as Alice
                
                // Check if this Bob position is valid (no points blocking the rectangle)
                // If bobY &gt; maxY and bobY &lt;= aliceY, then no previous point blocks this rectangle
                if (maxY &lt; bobY &amp;&amp; bobY &lt;= aliceY) {
                    maxY = bobY; // Update the highest y coordinate found
                    pairCount++; // Valid pair found
                }
            }
        }
        
        return pairCount;
    }
};</code></pre>
        </div>
        <a href="/" class="back-link">‚Üê Back to Home</a>
    </main>
</body>

</html>